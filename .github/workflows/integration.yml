name: Integration - Lint, Build, and Test

on:
  push:
    tags:
      # Version the tag as you can only use a tag once
      - "integration-v*.*.*"

jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest
    steps:
      # Have the runner execute in a branch
      - uses: actions/checkout@v4
      # Setup node env w/ lts version
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - run: npm install
      - run: npm run installs
      - run: npm run lint

  build:
    name: Check Build
    runs-on: ubuntu-latest
    # needs: [lint]
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - run: npm install
      - run: npm run installs
      - run: npm run build

  test:
    name: Testing
    runs-on: ubuntu-latest
    # needs: [lint, build]
    steps:
      - uses: actions/checkout@v4
      - run: npm install
      - run: npm run installs
      - run: npm run test

  deploy-docker:
    name: Build and Push Docker Image to GHCR
    runs-on: ubuntu-latest
    # needs: [lint, build, test]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - run: npm install
      - run: npm run installs
      - run: npm run build

      # Generate the .env file
      - name: Generating .env file
        run: |
          echo "POSTGRES_DB=${{ secrets.POSTGRES_DB }}" >> .env
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env
          echo "MASTER_SECRET=${{ secrets.MASTER_SECRET }}" >> .env

      # Uses GH's container registry and GH generates a token for us
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      - name: Build Tagged Docker Image
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          REPO_OWNER=$(echo $GITHUB_REPOSITORY_OWNER | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/$REPO_OWNER/virtual-park:$VERSION
          LATEST=ghcr.io/$REPO_OWNER/virtual-park:latest

          docker compose -f docker-compose.yaml build
          docker tag virtual-park:latest $IMAGE
          docker tag virtual-park:latest $LATEST

          # Push both tags
          docker push $IMAGE
          docker push $LATEST

  deploy:
    name: Deploy and Spin Up on EC2 Instance
    runs-on: ubuntu-latest
    # needs: [lint, build, test, deploy-docker]
    steps:
      - uses: actions/checkout@v4
      - name: SSH into EC2 and Deploy
        run: echo "This would ssh into EC2, pull the latest image, and run npm run containerised"
