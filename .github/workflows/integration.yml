name: Integration - Lint, Build, and Test

on:
  push:
    tags:
      # Version the tag as you can only use a tag once
      - "integration-v*.*.*"
env:
  POSTGRES_USER: postgres
  POSTGRES_PASSWORD: postgres

jobs:
  lint:
    name: Linter
    runs-on: ubuntu-latest
    steps:
      # Have the runner execute in a branch
      - uses: actions/checkout@v4
      # Setup node env w/ lts version
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - run: npm install
      - run: npm run installs
      - run: npm run lint

  test:
    name: Testing
    runs-on: ubuntu-latest
    needs: [lint]

    env:
      DATABASE_URL: postgres://postgres:postgres@localhost:5432/testdb
      MASTER_SECRET: not-a-very-secret-secret
      STRIPE_PUBLISHABLE_KEY : ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
      STRIPE_SECRET_KEY: ${{ secrets.STRIPE_SECRET_KEY }}
      POSTGRES_DB: testdb
      JSON_LIMIT: 15mb
      GOOGLE_CREDENTIALS_PATH: ${{ secrets.GOOGLE_CREDENTIALS_PATH }}
      GOOGLE_VISION_API_KEY: ${{ secrets.GOOGLE_VISION_API_KEY }}
      MAILGUN_API_KEY: ${{ secrets.MAILGUN_API_KEY }}
      PAYROLL_API_KEY: ${{ secrets.PAYROLL_API_KEY }}
      REGISTRAR_API_KEY: ${{ secrets.REGISTRAR_API_KEY }}
      POLICE_API_KEY: ${{ secrets.POLICE_API_KEY }}
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - name: Recreate ocr-service-account.json
        run: | 
          mkdir -p Micorservices/VehicleService/credentials
          echo "${{ secrets.OCR_SERVICE_ACCOUNT_BASE64 }}" | base64 -d > Micorservices/VehicleService/credentials/ocr-service-account.json
      - run: npm install
      - run: npm run installs
      - name: Start DB via Docker Compose
        run: docker compose -f Dev/docker-compose.yaml up -d
      - name: Wait for DB
        run: sleep 10
      - run: npm run test
      - name: Stop and clean up Docker Compose
        if: always()
        run: docker compose -f Dev/docker-compose.yaml down

  deploy-docker:
    name: Build and Push Docker Image to GHCR
    runs-on: ubuntu-latest
    needs: [lint]
    permissions:
      contents: read
      packages: write
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: "lts/*"
      - run: npm install
      - run: npm run installs
      # Verify the build
      - run: npm run build

      # Log in to GHCR
      - name: Log in to GHCR
        run: echo "${{ secrets.GITHUB_TOKEN }}" | docker login ghcr.io -u "${{ github.actor }}" --password-stdin

      # Build and push Docker image
      - name: Build Tagged Docker Image
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          REPO_OWNER=$(echo $GITHUB_REPOSITORY_OWNER | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/$REPO_OWNER/virtual-park:$VERSION
          docker build . -t $IMAGE --platform linux/amd64
          docker push $IMAGE

      # I had ChatGPT generate the lowercase conversion, which is why it failed the first time
      - name: Tag and Push as Latest
        run: |
          VERSION=${GITHUB_REF#refs/tags/}
          REPO_OWNER=$(echo $GITHUB_REPOSITORY_OWNER | tr '[:upper:]' '[:lower:]')
          IMAGE=ghcr.io/$REPO_OWNER/virtual-park:$VERSION
          LATEST=ghcr.io/$REPO_OWNER/virtual-park:latest
          docker tag $IMAGE $LATEST
          docker push $LATEST

  deploy:
    name: Deploy and Spin Up on EC2 Instance
    runs-on: ubuntu-latest
    needs: [lint, test, deploy-docker]
    steps:
      - uses: actions/checkout@v4
      - name: SSH into EC2 and Deploy
        run: echo "This would ssh into EC2, pull the latest image, and run npm run containerised"